import logging

import aiomysql
from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto

import app.keyboards as kb
from config import db_config, ADMINS
from database.database import Database

router = Router()
db = Database(db_config)


async def ensure_db_connection():
    if db.pool is None:
        await db.connect()
        if db.pool is None:
            raise Exception("Failed to connect to the database")
        print("Successfully connected to the database.")


async def get_favorite_properties(user_id):
    query = """
    SELECT property1, property2, property3, property4, property5, property6, property7, property8
    FROM favorites
    WHERE user_id = %s
    """
    async with db.pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute(query, (user_id,))
            result = await cursor.fetchone()
            if result:
                return [result[key] for key in result if result[key] is not None]
            return []


async def get_property_by_id(property_id):
    query_property = "SELECT * FROM properties WHERE property_id = %s"
    query_rating = "SELECT AVG(rating) as avg_rating FROM reviews WHERE property_id = %s AND approved = 1"

    async with db.pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute(query_property, (property_id,))
            property = await cursor.fetchone()

            if property:
                await cursor.execute(query_rating, (property_id,))
                rating_result = await cursor.fetchone()
                property['avg_rating'] = rating_result['avg_rating'] if rating_result else None

            return property


def generate_property_buttons(property):
    return [
        [InlineKeyboardButton(text="üìû –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/tropicalsamui")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{property['property_id']}"),
         InlineKeyboardButton(text="üó∫ –ù–∞ –∫–∞—Ä—Ç–µ", callback_data=f"map_{property['property_id']}")],
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥", callback_data=f"review_{property['property_id']}"),
         InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏",
                              callback_data=f"read_reviews_{property['property_id']}")],
        [InlineKeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–∑–±—Ä–∞–Ω–Ω—ã–º", callback_data="back_to_favorites")]
    ]


def generate_property_text(property):
    avg_rating = property.get('avg_rating')
    if avg_rating is not None:
        avg_rating = f"‚≠ê {avg_rating:.1f}"
    else:
        avg_rating = '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞'

    return (
        f"üè† <b>{property['name']}</b>\n\n"
        f"üìç <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {property['location']}\n"
        f"üåä <b>–£–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –º–æ—Ä—è:</b> {property['distance_to_sea']}\n"
        f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {property['property_type']}\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü:</b> {property['monthly_price']}‡∏ø\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ:</b> {property['daily_price']}‡∏ø\n"
        f"üíµ <b>–ó–∞–ª–æ–≥:</–±> {property['booking_deposit_fixed']}‡∏ø\n"
        f"üîí <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</–±> {property['security_deposit']}‡∏ø\n\n"
        f"üõèÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω:</–±> {property['bedrooms']}\n"
        f"üõÅ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö:</–±> {property['bathrooms']}\n"
        f"üèä <b>–ë–∞—Å—Å–µ–π–Ω:</–±> {'–î–∞' if property['pool'] else '–ù–µ—Ç'}\n"
        f"üç¥ <b>–ö—É—Ö–Ω—è:</–±> {'–î–∞' if property['kitchen'] else '–ù–µ—Ç'}\n"
        f"üßπ <b>–£–±–æ—Ä–∫–∞:</–±> {'–î–∞' if property['cleaning'] else '–ù–µ—Ç'}\n"
        f"üí° <b>–£—Ç–∏–ª–∏—Ç—ã:</–±> {property['utility_bill']}\n\n"
        f"üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</–±> {property['description']}\n\n"
        f"üåü <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</–±> {avg_rating}\n"
    ).replace("</–±>", "</b>")


@router.callback_query(F.data == "favorites")
async def show_favorites(callback: CallbackQuery):
    await ensure_db_connection()
    user_id = callback.from_user.id

    favorite_ids = await get_favorite_properties(user_id)
    if not favorite_ids:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤/–∏–ª–∏ –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω")
        return

    favorites = []
    for property_id in favorite_ids:
        property = await get_property_by_id(property_id)
        if property:
            favorites.append(property)

    if not favorites:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"{property['name']}", callback_data=f"show_{property['property_id']}")]
        for property in favorites
    ]

    buttons.append([InlineKeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:", reply_markup=keyboard)


@router.callback_query(F.data.startswith('show_'))
async def show_property_info(callback_query: CallbackQuery, state: FSMContext):
    property_id = int(callback_query.data.split('_')[1])
    property = await get_property_by_id(property_id)

    if not property:
        await callback_query.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    avg_rating = property.get('avg_rating')
    if avg_rating is not None:
        avg_rating = f"‚≠ê {avg_rating:.1f}"
    else:
        avg_rating = '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞'

    text = (
        f"üè† <b>{property['name']}</b>\n\n"
        f"üìç <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {property['location']}\n"
        f"üåä <b>–£–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –º–æ—Ä—è:</b> {property['distance_to_sea']}\n"
        f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</–±> {property['property_type']}\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü:</–±> {property['monthly_price']}‡∏ø\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ:</–±> {property['daily_price']}‡∏ø\n"
        f"üíµ <b>–ó–∞–ª–æ–≥:</–±> {property['booking_deposit_fixed']}‡∏ø\n"
        f"üîí <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</–±> {property['security_deposit']}‡∏ø\n\n"
        f"üõèÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω:</–±> {property['bedrooms']}\n"
        f"üõÅ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö:</–±> {property['bathrooms']}\n"
        f"üèä <b>–ë–∞—Å—Å–µ–π–Ω:</–±> {'–î–∞' if property['pool'] else '–ù–µ—Ç'}\n"
        f"üç¥ <b>–ö—É—Ö–Ω—è:</–±> {'–î–∞' if property['kitchen'] else '–ù–µ—Ç'}\n"
        f"üßπ <b>–£–±–æ—Ä–∫–∞:</–±> {'–î–∞' if property['cleaning'] else '–ù–µ—Ç'}\n"
        f"üí° <b>–£—Ç–∏–ª–∏—Ç—ã:</–±> {property['utility_bill']}\n\n"
        f"üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</–±> {property['description']}\n\n"
        f"üåü <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</–±> {avg_rating}\n"
    ).replace("</–±>", "</b>")

    keyboard = InlineKeyboardMarkup(inline_keyboard=generate_property_buttons(property))

    photos = [property[f'photo{i}'] for i in range(1, 10) if property[f'photo{i}']]

    if photos:
        media = [InputMediaPhoto(media=photos[0], caption=text, parse_mode=ParseMode.HTML)]
        media.extend([InputMediaPhoto(media=photo) for photo in photos[1:]])

        try:
            if callback_query.message.photo:
                await callback_query.message.delete()

            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10 —Ñ–æ—Ç–æ, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—ã
            if len(media) > 10:
                for i in range(0, len(media), 10):
                    media_group = media[i:i + 10]
                    media_group_message = await callback_query.message.answer_media_group(media=media_group)
                    message_ids = [msg.message_id for msg in media_group_message]
                    await state.update_data(message_ids=message_ids)
            else:
                media_group_message = await callback_query.message.answer_media_group(media=media)
                action_message = await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                message_ids = [msg.message_id for msg in media_group_message]
                message_ids.append(action_message.message_id)
                await state.update_data(message_ids=message_ids)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞: {e}")
            await callback_query.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    else:
        await callback_query.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)


@router.callback_query(F.data.startswith('del_'))
async def remove_from_favorites_handler(callback_query: CallbackQuery, state: FSMContext):
    property_id = int(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id
    await remove_from_favorites(user_id, property_id)
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
    await show_favorites(callback_query.message)


async def remove_from_favorites(user_id, property_id):
    query_check = "SELECT property1, property2, property3, property4, property5, property6, property7, property8 FROM favorites WHERE user_id = %s"
    async with db.pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute(query_check, (user_id,))
            result = await cursor.fetchone()

            if result:
                properties = [result[f'property{i}'] for i in range(1, 9)]
                if property_id in properties:
                    properties[properties.index(property_id)] = None
                    update_query = """
                    UPDATE favorites 
                    SET property1 = %s, property2 = %s, property3 = %s, property4 = %s, property5 = %s, property6 = %s, property7 = %s, property8 = %s 
                    WHERE user_id = %s
                    """
                    await cursor.execute(update_query, (*properties, user_id))
                    await conn.commit()


@router.callback_query(F.data == "back_to_favorites")
async def back_to_favorites(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()

    user_id = callback_query.from_user.id
    favorite_ids = await get_favorite_properties(user_id)
    if not favorite_ids:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return

    favorites = []
    for property_id in favorite_ids:
        property = await get_property_by_id(property_id)
        if property:
            favorites.append(property)

    if not favorites:
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"{property['name']}", callback_data=f"show_{property['property_id']}")]
        for property in favorites
    ]

    buttons.append([InlineKeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", callback_data="back_to_main")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.answer("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:", reply_markup=keyboard)


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback_query: CallbackQuery):
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main)
    await callback_query.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
class ReviewStates(StatesGroup):
    waiting_for_review = State()
    waiting_for_rating = State()


@router.callback_query(F.data.startswith('review_'))
async def start_review(callback_query: CallbackQuery, state: FSMContext):
    property_id = int(callback_query.data.split('_')[1])
    await state.update_data(property_id=property_id)
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (–≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∂–∏):")
    await callback_query.answer()
    await state.set_state(ReviewStates.waiting_for_review)


@router.message(ReviewStates.waiting_for_review)
async def process_review(message: Message, state: FSMContext):
    review_data = await state.get_data()
    property_id = review_data["property_id"]
    review = message.text
    user_id = message.from_user.id
    username = message.from_user.username

    await db.ensure_connection()

    # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º approved = 0
    insert_query = "INSERT INTO reviews (property_id, user_id, username, review, created_at, approved) VALUES (%s, %s, %s, %s, NOW(), 0)"
    insert_params = (property_id, user_id, username, review)
    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(insert_query, insert_params)
            await conn.commit()

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:")
    await state.set_state(ReviewStates.waiting_for_rating)


@router.message(ReviewStates.waiting_for_rating)
async def process_rating(message: Message, state: FSMContext):
    try:
        rating = int(message.text)
        if rating < 1 or rating > 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    data = await state.get_data()
    property_id = data['property_id']
    user_id = message.from_user.id

    await db.ensure_connection()

    # –û–±–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    query = """
    UPDATE reviews
    SET rating = %s
    WHERE property_id = %s AND user_id = %s
    ORDER BY created_at DESC
    LIMIT 1
    """
    params = (rating, property_id, user_id)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()

    # –ü–æ–ª—É—á–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    query_get_review = """
    SELECT review, review_id FROM reviews
    WHERE property_id = %s AND user_id = %s
    ORDER BY created_at DESC
    LIMIT 1
    """
    async with db.pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute(query_get_review, (property_id, user_id))
            review_record = await cursor.fetchone()

    review = review_record['review'] if review_record else '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'
    review_id = review_record['review_id'] if review_record else None

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–¥–æ–±—Ä–∏—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    buttons = [
        [InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{review_id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{review_id}")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    for admin_id in ADMINS:
        try:
            await message.bot.send_message(
                admin_id,
                f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è:\n\n"
                f"üè† <b>–û–±—ä–µ–∫—Ç ID:</b> {property_id}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username}\n"
                f"üìù <b>–û—Ç–∑—ã–≤:</b> {review}\n"
                f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥! –í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                         reply_markup=kb.main)
    await state.clear()


@router.callback_query(F.data.startswith('read_reviews_'))
async def read_reviews(callback_query: CallbackQuery):
    property_id = int(callback_query.data.split('_')[2])
    await db.ensure_connection()

    query_reviews = "SELECT username, review, rating, created_at FROM reviews WHERE property_id = %s AND approved = 1"
    params = (property_id,)

    async with db.pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute(query_reviews, params)
            reviews = await cursor.fetchall()

    if reviews:
        response = "–û—Ç–∑—ã–≤—ã –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:\n\n"
        for review in reviews:
            rating = review['rating'] if review['rating'] is not None else 0
            stars = '‚òÖ' * rating + '‚òÜ' * (5 - rating)
            response += f"üë§ @{review['username']} ({review['created_at']}):\nüìù {review['review']}\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stars}\n\n"
    else:
        response = "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏."

    await callback_query.message.answer(response)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.callback_query(F.data == "approve_reviews")
async def approve_reviews(callback_query: CallbackQuery):
    await db.ensure_connection()
    query = "SELECT review_id, property_id, username, review, rating FROM reviews WHERE approved = 0"
    async with db.pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute(query)
            pending_reviews = await cursor.fetchall()

    if not pending_reviews:
        await callback_query.message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return

    for review in pending_reviews:
        text = (
            f"–û—Ç–∑—ã–≤ –æ—Ç @{review['username']} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å ID {review['property_id']}:\n\n"
            f"üìù –û—Ç–∑—ã–≤: {review['review']}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * review['rating']}\n\n"
            f"–û–¥–æ–±—Ä–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?"
        )
        buttons = [
            [InlineKeyboardButton(text="–î–∞", callback_data=f"approve_{review['review_id']}")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"reject_{review['review_id']}")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith('approve_'))
async def approve_review(callback_query: CallbackQuery):
    review_id = int(callback_query.data.split('_')[1])
    await db.ensure_connection()
    query = "UPDATE reviews SET approved = 1 WHERE review_id = %s"
    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, (review_id,))
            await conn.commit()
    await callback_query.answer("–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω.", show_alert=True)


@router.callback_query(F.data.startswith('reject_'))
async def reject_review(callback_query: CallbackQuery):
    review_id = int(callback_query.data.split('_')[1])
    await db.ensure_connection()
    query = "DELETE FROM reviews WHERE review_id = %s"
    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, (review_id,))
            await conn.commit()
    await callback_query.answer("–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω.", show_alert=True)


@router.callback_query(F.data.startswith('map_'))
async def show_on_map(callback_query: CallbackQuery):
    property_id = int(callback_query.data.split('_')[1])
    await db.ensure_connection()
    query = "SELECT latitude, longitude FROM properties WHERE property_id = %s"
    params = (property_id,)
    async with db.pool.acquire() as conn:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            await cursor.execute(query, params)
            result = await cursor.fetchone()

    if result:
        latitude, longitude = result['latitude'], result['longitude']
        if latitude is not None and longitude is not None:
            await callback_query.message.answer_location(latitude=latitude, longitude=longitude)
        else:
            await callback_query.message.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
    else:
        await callback_query.message.answer("–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback_query.answer()
