import logging

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message

import app.keyboards as kb
from config import db_config, ADMINS
from database.database import Database

router = Router()
db = Database(db_config)


async def ensure_db_connection():
    if db.pool is None:
        await db.connect()
        if db.pool is None:
            raise Exception("Failed to connect to the database")
        print("Database connected successfully.")


@router.message(CommandStart())
async def send_welcome(message: Message):
    await ensure_db_connection()
    await db.update_last_activity(message.from_user.id)
    user_id = message.from_user.id
    user_info = await db.get_user_info(user_id)

    if user_info:
        phone_number_index = 3
        if user_info[phone_number_index]:
            welcome_text = (
                f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!</b>\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ <u><b>–°–∞–º—É–∏</b></u>! üå¥üè†\n\n"
                "<b>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏–ª–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –æ—Å—Ç—Ä–æ–≤–µ.</b>\n\n"
            )
            if user_id in ADMINS:
                await message.answer(welcome_text, reply_markup=kb.admin_main, parse_mode=ParseMode.HTML)
            else:
                await message.answer(welcome_text, reply_markup=kb.main, parse_mode=ParseMode.HTML)
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=kb.numbers)
    else:
        await db.add_user(user_id, message.from_user.username)
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...')
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                             reply_markup=kb.numbers)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                             reply_markup=kb.main if user_id not in ADMINS else kb.admin_main)


@router.message(F.contact)
async def handle_contact(message: Message):
    telegram_id = message.from_user.id
    phone_number = message.contact.phone_number

    success = await db.add_user_phone_number(telegram_id, phone_number)
    logging.info(f"add_user_phone_number: user_id={telegram_id}, phone_number={phone_number}, success={success}")

    await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=kb.main)
    welcome_text = (
        f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!</b>\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ <u><b>–°–∞–º—É–∏</b></u>! üå¥üè†\n\n"
        "<b>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏–ª–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –æ—Å—Ç—Ä–æ–≤–µ.</b>\n\n"
    )
    await message.answer(welcome_text, reply_markup=kb.main, parse_mode=ParseMode.HTML)
