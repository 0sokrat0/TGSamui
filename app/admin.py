# app/admin.py
import logging

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    CallbackQuery
import app.keyboards as kb
from bot import db, bot
from config import ADMINS, db_config
from database.database import Database

db = Database(db_config)

router = Router()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admins_panel = ReplyKeyboardMarkup(
    resize_keyboard=True,
    one_time_keyboard=True,
    keyboard=[
        [
            KeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"),
            KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"),
            KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"),
            KeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        ],
        [
            KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            KeyboardButton(text="‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        ],
        [
            KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        ]
    ]
)

class AdminProtect:
    async def __call__(self, message: Message):
        return message.from_user.id in ADMINS

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(Command('panel'))
async def apanel(message: Message):
    if message.from_user.id in ADMINS:
        await message.answer('–≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admins_panel)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.')




# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
class NewProperty(StatesGroup):
    waiting_for_name = State()
    waiting_for_photo1 = State()
    waiting_for_photo2 = State()
    waiting_for_photo3 = State()
    waiting_for_location = State()
    waiting_for_distance_to_sea = State()
    waiting_for_property_type = State()
    waiting_for_monthly_price = State()
    waiting_for_daily_price = State()
    waiting_for_booking_deposit_fixed = State()
    waiting_for_security_deposit = State()
    waiting_for_bedrooms = State()
    waiting_for_bathrooms = State()
    waiting_for_pool = State()
    waiting_for_kitchen = State()
    waiting_for_cleaning = State()
    waiting_for_description = State()
    waiting_for_utility_bill = State()
    waiting_for_delete_id = State()
    waiting_for_edit_id = State()
    waiting_for_edit_field = State()
    waiting_for_edit_value = State()
    confirm_deletion = State()
    confirm_edit = State()

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def start_property_creation(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
        await state.set_state(NewProperty.waiting_for_name)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(NewProperty.waiting_for_name)
async def property_name_received(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ:")
    await state.set_state(NewProperty.waiting_for_photo1)

# –í–≤–æ–¥ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
@router.message(NewProperty.waiting_for_photo1)
async def property_photo1_received(message: Message, state: FSMContext):
    await state.update_data(photo1=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ:")
    await state.set_state(NewProperty.waiting_for_photo2)

# –í–≤–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ
@router.message(NewProperty.waiting_for_photo2)
async def property_photo2_received(message: Message, state: FSMContext):
    await state.update_data(photo2=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ:")
    await state.set_state(NewProperty.waiting_for_photo3)

# –í–≤–æ–¥ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ñ–æ—Ç–æ
@router.message(NewProperty.waiting_for_photo3)
async def property_photo3_received(message: Message, state: FSMContext):
    await state.update_data(photo3=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
    await state.set_state(NewProperty.waiting_for_location)

# –í–≤–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(NewProperty.waiting_for_location)
async def property_location_received(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –º–æ—Ä—è:")
    await state.set_state(NewProperty.waiting_for_distance_to_sea)

# –í–≤–æ–¥ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –º–æ—Ä—è
@router.message(NewProperty.waiting_for_distance_to_sea)
async def property_distance_to_sea_received(message: Message, state: FSMContext):
    await state.update_data(distance_to_sea=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:")
    await state.set_state(NewProperty.waiting_for_property_type)

# –í–≤–æ–¥ —Ç–∏–ø–∞ –∂–∏–ª—å—è
@router.message(NewProperty.waiting_for_property_type)
async def property_type_received(message: Message, state: FSMContext):
    await state.update_data(property_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü:")
    await state.set_state(NewProperty.waiting_for_monthly_price)

# –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –º–µ—Å—è—Ü
@router.message(NewProperty.waiting_for_monthly_price)
async def property_monthly_price_received(message: Message, state: FSMContext):
    await state.update_data(monthly_price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ:")
    await state.set_state(NewProperty.waiting_for_daily_price)

# –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ
@router.message(NewProperty.waiting_for_daily_price)
async def property_daily_price_received(message: Message, state: FSMContext):
    await state.update_data(daily_price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –±—Ä–æ–Ω–∏:")
    await state.set_state(NewProperty.waiting_for_booking_deposit_fixed)

# –í–≤–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
@router.message(NewProperty.waiting_for_booking_deposit_fixed)
async def property_booking_deposit_fixed_received(message: Message, state: FSMContext):
    await state.update_data(booking_deposit_fixed=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:")
    await state.set_state(NewProperty.waiting_for_security_deposit)

# –í–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
@router.message(NewProperty.waiting_for_security_deposit)
async def property_security_deposit_received(message: Message, state: FSMContext):
    await state.update_data(security_deposit=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω:")
    await state.set_state(NewProperty.waiting_for_bedrooms)

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
@router.message(NewProperty.waiting_for_bedrooms)
async def property_bedrooms_received(message: Message, state: FSMContext):
    await state.update_data(bedrooms=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:")
    await state.set_state(NewProperty.waiting_for_bathrooms)

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
@router.message(NewProperty.waiting_for_bathrooms)
async def property_bathrooms_received(message: Message, state: FSMContext):
    await state.update_data(bathrooms=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ –±–∞—Å—Å–µ–π–Ω? (–î–∞/–ù–µ—Ç):")
    await state.set_state(NewProperty.waiting_for_pool)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Å—Å–µ–π–Ω–µ
@router.message(NewProperty.waiting_for_pool)
async def property_pool_received(message: Message, state: FSMContext):
    await state.update_data(pool=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ –∫—É—Ö–Ω—è? (–î–∞/–ù–µ—Ç):")
    await state.set_state(NewProperty.waiting_for_kitchen)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ö–Ω–µ
@router.message(NewProperty.waiting_for_kitchen)
async def property_kitchen_received(message: Message, state: FSMContext):
    await state.update_data(kitchen=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É–±–æ—Ä–∫–∞? (–î–∞/–ù–µ—Ç):")
    await state.set_state(NewProperty.waiting_for_cleaning)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–æ—Ä–∫–µ
@router.message(NewProperty.waiting_for_cleaning)
async def property_cleaning_received(message: Message, state: FSMContext):
    await state.update_data(cleaning=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(NewProperty.waiting_for_description)

# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(NewProperty.waiting_for_description)
async def property_description_received(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—ã (–≤–æ–¥–∞, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∏ —Ç.–¥.):")
    await state.set_state(NewProperty.waiting_for_utility_bill)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ç–∏–ª–∏—Ç–∞—Ö
@router.message(NewProperty.waiting_for_utility_bill)
async def property_utility_bill_received(message: Message, state: FSMContext):
    await state.update_data(utility_bill=message.text)

    await db.ensure_connection()

    property_data = await state.get_data()

    query = """
    INSERT INTO properties (name, photo1, photo2, photo3, location, distance_to_sea, property_type,
                            monthly_price, daily_price, booking_deposit_fixed, security_deposit, bedrooms,
                            bathrooms, pool, kitchen, cleaning, description, utility_bill)
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """
    params = (
        property_data['name'], property_data['photo1'], property_data['photo2'], property_data['photo3'],
        property_data['location'], property_data['distance_to_sea'], property_data['property_type'],
        property_data['monthly_price'], property_data['daily_price'], property_data['booking_deposit_fixed'],
        property_data['security_deposit'], property_data['bedrooms'], property_data['bathrooms'],
        property_data['pool'], property_data['kitchen'], property_data['cleaning'],
        property_data['description'], property_data['utility_bill']
    )

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()

    await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=admins_panel)
    await state.clear()

# –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def start_property_deletion(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        await state.set_state(NewProperty.waiting_for_delete_id)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–≤–æ–¥ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(NewProperty.waiting_for_delete_id)
async def delete_property_id_received(message: Message, state: FSMContext):
    property_id = message.text
    await db.ensure_connection()

    query = "DELETE FROM properties WHERE property_id = %s"
    params = (property_id,)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()

    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å ID {property_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=admins_panel)
    await state.clear()

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
edit_field_buttons = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 1", callback_data="edit_photo1"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 2", callback_data="edit_photo2"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 3", callback_data="edit_photo3")
        ],
        [
            InlineKeyboardButton(text="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="edit_location"),
            InlineKeyboardButton(text="–£–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –º–æ—Ä—è", callback_data="edit_distance_to_sea"),
            InlineKeyboardButton(text="–¢–∏–ø –∂–∏–ª—å—è", callback_data="edit_property_type")
        ],
        [
            InlineKeyboardButton(text="–¶–µ–Ω–∞ –≤ –º–µ—Å—è—Ü", callback_data="edit_monthly_price"),
            InlineKeyboardButton(text="–¶–µ–Ω–∞ –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ", callback_data="edit_daily_price"),
            InlineKeyboardButton(text="–ú–∏–Ω. –Ω–æ—á–µ–π", callback_data="edit_minimum_nights")
        ],
        [
            InlineKeyboardButton(text="–§–∏–∫—Å. –¥–µ–ø–æ–∑–∏—Ç", callback_data="edit_booking_deposit_fixed"),
            InlineKeyboardButton(text="–ü—Ä–æ—Ü–µ–Ω—Ç. –¥–µ–ø–æ–∑–∏—Ç", callback_data="edit_booking_deposit_percent"),
            InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç", callback_data="edit_security_deposit")
        ],
        [
            InlineKeyboardButton(text="–°–ø–∞–ª—å–Ω–∏", callback_data="edit_bedrooms"),
            InlineKeyboardButton(text="–ö—Ä–æ–≤–∞—Ç–∏", callback_data="edit_beds"),
            InlineKeyboardButton(text="–í–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="edit_bathrooms")
        ],
        [
            InlineKeyboardButton(text="–ë–∞—Å—Å–µ–π–Ω", callback_data="edit_pool"),
            InlineKeyboardButton(text="–ö—É—Ö–Ω—è", callback_data="edit_kitchen"),
            InlineKeyboardButton(text="–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã", callback_data="edit_air_conditioners")
        ],
        [
            InlineKeyboardButton(text="–£–±–æ—Ä–∫–∞", callback_data="edit_cleaning"),
            InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description"),
            InlineKeyboardButton(text="–£—Ç–∏–ª–∏—Ç—ã", callback_data="edit_utility_bill")
        ]
    ]
)

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def start_property_editing(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        await state.set_state(NewProperty.waiting_for_edit_id)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–≤–æ–¥ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(NewProperty.waiting_for_edit_id)
async def edit_property_id_received(message: Message, state: FSMContext):
    property_id = message.text
    await state.update_data(property_id=property_id)

    await db.ensure_connection()

    query = "SELECT * FROM properties WHERE property_id = %s"
    params = (property_id,)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            property = await cursor.fetchone()

    if property:
        await message.answer(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:\n{property}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=edit_field_buttons)
        await state.set_state(NewProperty.waiting_for_edit_field)
    else:
        await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admins_panel)
        await state.clear()

# –í–≤–æ–¥ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@router.callback_query(NewProperty.waiting_for_edit_field)
async def edit_property_field_received(callback_query: types.CallbackQuery, state: FSMContext):
    selected_field = callback_query.data.replace("edit_", "")
    await state.update_data(selected_field=selected_field)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {selected_field}:")
    await state.set_state(NewProperty.waiting_for_edit_value)
    await callback_query.answer()

# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
@router.message(NewProperty.waiting_for_edit_value)
async def edit_property_value_received(message: Message, state: FSMContext):
    data = await state.get_data()
    property_id = data['property_id']
    selected_field = data['selected_field']
    new_value = message.text

    await state.update_data(new_value=new_value)

    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ '{selected_field}' –Ω–∞ '{new_value}'? (–î–∞/–ù–µ—Ç)")
    await state.set_state(NewProperty.confirm_edit)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(NewProperty.confirm_edit)
async def confirm_property_edit(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    if confirmation == "–¥–∞":
        data = await state.get_data()
        property_id = data['property_id']
        selected_field = data['selected_field']
        new_value = data['new_value']

        await db.ensure_connection()

        query = f"UPDATE properties SET {selected_field} = %s WHERE property_id = %s"
        params = (new_value, property_id)

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query, params)
                await conn.commit()

        await message.answer(f"–ü–æ–ª–µ {selected_field} –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å ID {property_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admins_panel)
    else:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admins_panel)

    await state.clear()
# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
@router.message(F.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
async def view_all_properties(message: Message):
    if message.from_user.id in ADMINS:
        await db.ensure_connection()

        query = "SELECT property_id, name FROM properties"

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query)
                properties = await cursor.fetchall()

        if properties:
            response = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:\n\n"
            for prop in properties:
                response += f"ID: {prop[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {prop[1]}\n"
            await message.answer(response,reply_markup=admins_panel)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def return_to_main_menu(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=kb.main)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫


class Newsletter(StatesGroup):
    waiting_for_subject = State()
    waiting_for_message = State()
    waiting_for_photo = State()
    confirm_sending = State()



async def log_user_action(property_id: int, user_id: int, action: str):
    await db.ensure_connection()

    query = """
    INSERT INTO analytics (property_id, user_id, action)
    VALUES (%s, %s, %s)
    """
    params = (property_id, user_id, action)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()


# –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def create_newsletter(subject: str, message: str, photo: str = None):
    await db.ensure_connection()

    query = """
    INSERT INTO newsletters (subject, message, photo)
    VALUES (%s, %s, %s)
    """
    params = (subject, message, photo)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def log_newsletter_recipient(newsletter_id: int, user_id: int):
    await db.ensure_connection()

    query = """
    INSERT INTO newsletter_recipients (newsletter_id, user_id)
    VALUES (%s, %s)
    """
    params = (newsletter_id, user_id)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()


# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.text == "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_newsletter_creation(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(Newsletter.waiting_for_subject)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')


# –í–≤–æ–¥ —Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Newsletter.waiting_for_subject)
async def newsletter_subject_received(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Newsletter.waiting_for_message)


# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Newsletter.waiting_for_message)
async def newsletter_message_received(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip:")
    await state.set_state(Newsletter.waiting_for_photo)


# –í–≤–æ–¥ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Newsletter.waiting_for_photo, F.photo)
async def newsletter_photo_received(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (–î–∞/–ù–µ—Ç)")
    await state.set_state(Newsletter.confirm_sending)


@router.message(Newsletter.waiting_for_photo, F.text)
async def newsletter_text_received(message: Message, state: FSMContext):
    await state.update_data(photo=None)
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (–î–∞/–ù–µ—Ç)")
    await state.set_state(Newsletter.confirm_sending)


@router.message(Newsletter.confirm_sending)
async def confirm_newsletter_sending(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    if confirmation == "–¥–∞":
        data = await state.get_data()
        subject = data['subject']
        message_text = data['message']
        photo = data.get('photo')

        await create_newsletter(subject, message_text, photo)

        await db.ensure_connection()

        query = "SELECT user_id FROM users WHERE notifications_enabled = TRUE"

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query)
                users = await cursor.fetchall()

        for user in users:
            user_id = user[0]
            try:
                if photo:
                    await bot.send_photo(user_id, photo=photo, caption=f"{subject}\n\n{message_text}")
                else:
                    await bot.send_message(user_id, text=f"{subject}\n\n{message_text}")
            except Exception as e:
                logging.exception(f"Failed to send notification to user {user_id}: {e}")

        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", reply_markup=admins_panel)
    else:
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admins_panel)

    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_newsletter_to_user(user_id: int, subject: str, message_text: str, photo: str = None):
    try:
        if photo:
            await bot.send_photo(user_id, photo=photo, caption=f"{subject}\n\n{message_text}")
        else:
            await bot.send_message(user_id, text=f"{subject}\n\n{message_text}")
    except Exception as e:
        logging.exception(f"Failed to send notification to user {user_id}: {e}")




@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def manage_notifications(message: Message):
    await db.ensure_connection()
    await db.update_last_activity(message.from_user.id)

    response_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:"
    await message.answer(response_text, reply_markup=kb.notification_keyboard)


@router.callback_query(F.data == "subscribe_notifications")
async def subscribe_notifications(callback_query: CallbackQuery):
    await db.ensure_connection()
    await db.update_last_activity(callback_query.from_user.id)
    user_id = callback_query.from_user.id

    await db.subscribe_to_notifications(user_id)
    await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!", reply_markup=kb.main)
    await callback_query.answer()


@router.callback_query(F.data == "unsubscribe_notifications")
async def unsubscribe_notifications(callback_query: CallbackQuery):
    await db.ensure_connection()
    await db.update_last_activity(callback_query.from_user.id)
    user_id = callback_query.from_user.id

    await db.unsubscribe_from_notifications(user_id)
    await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=kb.main)
    await callback_query.answer()


@router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics(message: Message):
    if message.from_user.id in ADMINS:
        await db.ensure_connection()

        stats = await db.get_detailed_user_statistics()
        response_text = (
            f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
            f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é):</b> {stats['active_users']}\n"
            f"üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é):</b> {stats['new_users']}\n"
        )

        await message.answer(response_text, parse_mode="HTML",reply_markup=admins_panel)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
