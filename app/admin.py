# app/admin.py
import logging
from datetime import time, datetime

import pandas as pd
from aiogram import F, Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    CallbackQuery, FSInputFile
import app.keyboards as kb
from bot import db, bot
from config import ADMINS, db_config
from database.database import Database

db = Database(db_config)

router = Router()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admins_panel = ReplyKeyboardMarkup(
    resize_keyboard=True,
    one_time_keyboard=True,
    keyboard=[
        [
            KeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"),
            KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
        ],
        [
            KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"),
            KeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
        ],
        [
            KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
            KeyboardButton(text="‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
            KeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        ],
        [
            KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        ]
    ]
)

class AdminProtect:
    async def __call__(self, message: Message):
        return message.from_user.id in ADMINS

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def apanel(message: Message):
    if message.from_user.id in ADMINS:
        await message.answer('–≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admins_panel)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.')




# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
class NewProperty(StatesGroup):
    waiting_for_name = State()
    waiting_for_photo1 = State()
    waiting_for_photo2 = State()
    waiting_for_photo3 = State()
    waiting_for_photo4 = State()
    waiting_for_photo5 = State()
    waiting_for_photo6 = State()
    waiting_for_photo7 = State()
    waiting_for_photo8 = State()
    waiting_for_photo9 = State()
    waiting_for_location = State()
    waiting_for_distance_to_sea = State()
    waiting_for_property_type = State()
    waiting_for_monthly_price = State()
    waiting_for_daily_price = State()
    waiting_for_booking_deposit_fixed = State()
    waiting_for_security_deposit = State()
    waiting_for_bedrooms = State()
    waiting_for_bathrooms = State()
    waiting_for_pool = State()
    waiting_for_kitchen = State()
    waiting_for_cleaning = State()
    waiting_for_description = State()
    waiting_for_utility_bill = State()
    waiting_for_coordinates = State()
    waiting_for_delete_id = State()
    waiting_for_edit_id = State()
    waiting_for_edit_field = State()
    waiting_for_edit_value = State()
    confirm_deletion = State()
    confirm_edit = State()
    waiting_for_edit_location_coordinates = State()


# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def start_property_creation(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
        await state.set_state(NewProperty.waiting_for_name)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(NewProperty.waiting_for_name)
async def property_name_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_photo1)

# –í–≤–æ–¥ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
@router.message(NewProperty.waiting_for_photo1, F.photo)
async def property_photo1_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo1=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo2)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
@router.message(NewProperty.waiting_for_photo2, F.photo)
async def property_photo2_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo2=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo3)

@router.message(NewProperty.waiting_for_photo3, F.photo)
async def property_photo3_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo3=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo4)

@router.message(NewProperty.waiting_for_photo4, F.photo)
async def property_photo4_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo4=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—è—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo5)

@router.message(NewProperty.waiting_for_photo5, F.photo)
async def property_photo5_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo5=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–µ—Å—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo6)

@router.message(NewProperty.waiting_for_photo6, F.photo)
async def property_photo6_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo6=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–¥—å–º–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo7)

@router.message(NewProperty.waiting_for_photo7, F.photo)
async def property_photo7_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo7=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ—Å—å–º–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo8)

@router.message(NewProperty.waiting_for_photo8, F.photo)
async def property_photo8_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo8=photo_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–≤—è—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(NewProperty.waiting_for_photo9)

@router.message(NewProperty.waiting_for_photo9, F.photo)
async def property_photo9_received(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo9=photo_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
    await state.set_state(NewProperty.waiting_for_location)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ
@router.message(F.text == "/skip")
async def skip_photo(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == NewProperty.waiting_for_photo1:
        await state.update_data(photo1=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo2)
    elif current_state == NewProperty.waiting_for_photo2:
        await state.update_data(photo2=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo3)
    elif current_state == NewProperty.waiting_for_photo3:
        await state.update_data(photo3=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo4)
    elif current_state == NewProperty.waiting_for_photo4:
        await state.update_data(photo4=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—è—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo5)
    elif current_state == NewProperty.waiting_for_photo5:
        await state.update_data(photo5=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–µ—Å—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo6)
    elif current_state == NewProperty.waiting_for_photo6:
        await state.update_data(photo6=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–¥—å–º–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo7)
    elif current_state == NewProperty.waiting_for_photo7:
        await state.update_data(photo7=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ—Å—å–º–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo8)
    elif current_state == NewProperty.waiting_for_photo8:
        await state.update_data(photo8=None)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–≤—è—Ç–æ–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(NewProperty.waiting_for_photo9)
    elif current_state == NewProperty.waiting_for_photo9:
        await state.update_data(photo9=None)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:")
        await state.set_state(NewProperty.waiting_for_location)

# –í–≤–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(NewProperty.waiting_for_location)
async def property_location_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(location=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9¬∞25'22.9\"N 99¬∞59'32.5\"E (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_coordinates)

# –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä–µ–∫—Ç–∞
@router.message(NewProperty.waiting_for_coordinates, F.text)
async def property_coordinates_received_text(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    try:
        coords = message.text.split()
        if len(coords) == 2:
            latitude = coords[0].replace("¬∞", " ").replace("'", " ").replace("\"", "").replace("N", "").replace("S", "-").strip()
            longitude = coords[1].replace("¬∞", " ").replace("'", " ").replace("\"", "").replace("E", "").replace("W", "-").strip()
            await state.update_data(latitude=float(latitude), longitude=float(longitude))
            await proceed_with_next_step(message, state)
        else:
            raise ValueError("Invalid format")
    except Exception as e:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(NewProperty.waiting_for_coordinates, F.location)
async def property_coordinates_received_location(message: Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    await state.update_data(latitude=latitude, longitude=longitude)
    await proceed_with_next_step(message, state)

async def proceed_with_next_step(message: Message, state: FSMContext):
    await message.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    await state.set_state(NewProperty.waiting_for_distance_to_sea)

# –í–≤–æ–¥ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –º–æ—Ä—è
@router.message(NewProperty.waiting_for_distance_to_sea)
async def property_distance_to_sea_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(distance_to_sea=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_property_type)

# –í–≤–æ–¥ —Ç–∏–ø–∞ –∂–∏–ª—å—è
@router.message(NewProperty.waiting_for_property_type)
async def property_type_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(property_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—è—Ü (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_monthly_price)

# –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –º–µ—Å—è—Ü
@router.message(NewProperty.waiting_for_monthly_price)
async def property_monthly_price_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(monthly_price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_daily_price)

# –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ
@router.message(NewProperty.waiting_for_daily_price)
async def property_daily_price_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(daily_price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –±—Ä–æ–Ω–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_booking_deposit_fixed)

# –í–≤–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
@router.message(NewProperty.waiting_for_booking_deposit_fixed)
async def property_booking_deposit_fixed_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(booking_deposit_fixed=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_security_deposit)

# –í–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
@router.message(NewProperty.waiting_for_security_deposit)
async def property_security_deposit_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(security_deposit=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_bedrooms)

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∞–ª–µ–Ω
@router.message(NewProperty.waiting_for_bedrooms)
async def property_bedrooms_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(bedrooms=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_bathrooms)

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
@router.message(NewProperty.waiting_for_bathrooms)
async def property_bathrooms_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(bathrooms=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ –±–∞—Å—Å–µ–π–Ω? (–î–∞/–ù–µ—Ç) (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_pool)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Å—Å–µ–π–Ω–µ
@router.message(NewProperty.waiting_for_pool)
async def property_pool_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(pool=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ –∫—É—Ö–Ω—è? (–î–∞/–ù–µ—Ç) (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_kitchen)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ö–Ω–µ
@router.message(NewProperty.waiting_for_kitchen)
async def property_kitchen_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(kitchen=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É–±–æ—Ä–∫–∞? (–î–∞/–ù–µ—Ç) (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_cleaning)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–±–æ—Ä–∫–µ
@router.message(NewProperty.waiting_for_cleaning)
async def property_cleaning_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(cleaning=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_description)

# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(NewProperty.waiting_for_description)
async def property_description_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—ã (–≤–æ–¥–∞, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∏ —Ç.–¥.) (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
    await state.set_state(NewProperty.waiting_for_utility_bill)

# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ç–∏–ª–∏—Ç–∞—Ö
@router.message(NewProperty.waiting_for_utility_bill)
async def property_utility_bill_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(utility_bill=message.text)
    await db.ensure_connection()

    property_data = await state.get_data()

    query = """
    INSERT INTO properties (name, photo1, photo2, photo3, photo4, photo5, photo6, photo7, photo8, photo9, location, distance_to_sea, property_type,
                            monthly_price, daily_price, booking_deposit_fixed, security_deposit, bedrooms, bathrooms, pool, kitchen, cleaning, description, utility_bill, latitude, longitude)
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """

    params = (
        property_data.get('name'), property_data.get('photo1'), property_data.get('photo2'),
        property_data.get('photo3'), property_data.get('photo4'), property_data.get('photo5'),
        property_data.get('photo6'), property_data.get('photo7'), property_data.get('photo8'),
        property_data.get('photo9'), property_data.get('location'), property_data.get('distance_to_sea'),
        property_data.get('property_type'), property_data.get('monthly_price'), property_data.get('daily_price'),
        property_data.get('booking_deposit_fixed'), property_data.get('security_deposit'),
        property_data.get('bedrooms'), property_data.get('bathrooms'), property_data.get('pool'),
        property_data.get('kitchen'), property_data.get('cleaning'), property_data.get('description'),
        property_data.get('utility_bill'), property_data.get('latitude'), property_data.get('longitude')
    )

    if len(params) != 26:  # 26 —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É. –û–∂–∏–¥–∞–µ—Ç—Å—è 26, –ø–æ–ª—É—á–µ–Ω–æ:", len(params))
    else:
        try:
            async with db.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(query, params)
                    await conn.commit()
            await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=admins_panel)
        except Exception as e:
            logging.error(f"Error executing query: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        await state.clear()

    # try:
    #     async with db.pool.acquire() as conn:
    #         async with conn.cursor() as cursor:
    #             await cursor.execute(query, params)
    #             await conn.commit()
    #     await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=admins_panel)
    # except Exception as e:
    #     logging.error(f"Error executing query: {e}")
    #     await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
    #
    # await state.clear()

async def cancel_action(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admins_panel)

# –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def start_property_deletion(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
        await state.set_state(NewProperty.waiting_for_delete_id)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–≤–æ–¥ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(NewProperty.waiting_for_delete_id)
async def delete_property_id_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    property_id = message.text
    await db.ensure_connection()

    query = "DELETE FROM properties WHERE property_id = %s"
    params = (property_id,)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()

    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å ID {property_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=admins_panel)
    await state.clear()

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
edit_field_buttons = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 1", callback_data="edit_photo1"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 2", callback_data="edit_photo2")
        ],
        [
            InlineKeyboardButton(text="–§–æ—Ç–æ 3", callback_data="edit_photo3"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 4", callback_data="edit_photo4"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 5", callback_data="edit_photo5"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 6", callback_data="edit_photo6")
        ],
        [
            InlineKeyboardButton(text="–§–æ—Ç–æ 7", callback_data="edit_photo7"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 8", callback_data="edit_photo8"),
            InlineKeyboardButton(text="–§–æ—Ç–æ 9", callback_data="edit_photo9")
        ],
        [
            InlineKeyboardButton(text="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="edit_location"),
            InlineKeyboardButton(text="–£–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –º–æ—Ä—è", callback_data="edit_distance_to_sea"),
            InlineKeyboardButton(text="–¢–∏–ø –∂–∏–ª—å—è", callback_data="edit_property_type")
        ],
        [
            InlineKeyboardButton(text="–¶–µ–Ω–∞ –≤ –º–µ—Å—è—Ü", callback_data="edit_monthly_price"),
            InlineKeyboardButton(text="–¶–µ–Ω–∞ –ø–æ—Å—Ç—É—Ç–æ—á–Ω–æ", callback_data="edit_daily_price"),
            InlineKeyboardButton(text="–ú–∏–Ω. –Ω–æ—á–µ–π", callback_data="edit_minimum_nights")
        ],
        [
            InlineKeyboardButton(text="–§–∏–∫—Å. –¥–µ–ø–æ–∑–∏—Ç", callback_data="edit_booking_deposit_fixed"),
            InlineKeyboardButton(text="–ü—Ä–æ—Ü–µ–Ω—Ç. –¥–µ–ø–æ–∑–∏—Ç", callback_data="edit_booking_deposit_percent"),
            InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç", callback_data="edit_security_deposit")
        ],
        [
            InlineKeyboardButton(text="–°–ø–∞–ª—å–Ω–∏", callback_data="edit_bedrooms"),
            InlineKeyboardButton(text="–ö—Ä–æ–≤–∞—Ç–∏", callback_data="edit_beds"),
            InlineKeyboardButton(text="–í–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="edit_bathrooms")
        ],
        [
            InlineKeyboardButton(text="–ë–∞—Å—Å–µ–π–Ω", callback_data="edit_pool"),
            InlineKeyboardButton(text="–ö—É—Ö–Ω—è", callback_data="edit_kitchen"),
            InlineKeyboardButton(text="–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã", callback_data="edit_air_conditioners")
        ],
        [
            InlineKeyboardButton(text="–£–±–æ—Ä–∫–∞", callback_data="edit_cleaning"),
            InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description"),
            InlineKeyboardButton(text="–£—Ç–∏–ª–∏—Ç—ã", callback_data="edit_utility_bill")
        ],
        [
            InlineKeyboardButton(text="–®–∏—Ä–æ—Ç–∞", callback_data="edit_latitude"),
            InlineKeyboardButton(text="–î–æ–ª–≥–æ—Ç–∞", callback_data="edit_longitude"),
            InlineKeyboardButton(text="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data="edit_coordinates")
        ]
    ]
)

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def start_property_editing(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
        await state.set_state(NewProperty.waiting_for_edit_id)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–≤–æ–¥ ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(NewProperty.waiting_for_edit_id)
async def edit_property_id_received(message: Message, state: FSMContext):
    property_id = message.text
    await state.update_data(property_id=property_id)

    await db.ensure_connection()

    query = "SELECT * FROM properties WHERE property_id = %s"
    params = (property_id,)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            property = await cursor.fetchone()

    if property:
        await message.answer(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:\n{property}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=edit_field_buttons)
        await state.set_state(NewProperty.waiting_for_edit_field)
    else:
        await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admins_panel)
        await state.clear()



# @router.callback_query(NewProperty.waiting_for_edit_field, F.data == "edit_coordinates")
# async def edit_property_coordinates(callback_query: CallbackQuery, state: FSMContext):
#     await state.set_state(NewProperty.waiting_for_edit_location_coordinates)
#     await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9¬∞25'22.9\"N 99¬∞59'32.5\"E (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
#     await callback_query.answer()


@router.callback_query(NewProperty.waiting_for_edit_field)
async def edit_property_field_received(callback_query: types.CallbackQuery, state: FSMContext):
    selected_field = callback_query.data.replace("edit_", "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ "coordinates"
    if selected_field == "coordinates":
        await state.update_data(selected_field="latitude_longitude")
        await callback_query.message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9¬∞25'22.9\"N 99¬∞59'32.5\"E (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
        await state.set_state(NewProperty.waiting_for_edit_location_coordinates)
    else:
        await state.update_data(selected_field=selected_field)
        await callback_query.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {selected_field}(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è):")
        await state.set_state(NewProperty.waiting_for_edit_value)
    await callback_query.answer()


@router.message(NewProperty.waiting_for_edit_location_coordinates, F.location)
async def property_new_location_received_location(message: Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    await state.update_data(new_value_location=(latitude, longitude))
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ ({latitude}, {longitude})? (–î–∞/–ù–µ—Ç)")
    await state.set_state(NewProperty.confirm_edit)


@router.message(NewProperty.waiting_for_edit_location_coordinates, F.text)
async def property_new_location_received_text(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    try:
        coords = message.text.split()
        if len(coords) == 2:
            latitude = coords[0].replace("¬∞", " ").replace("'", " ").replace("\"", "").replace("N", "").replace("S",
                                                                                                                "-").strip()
            longitude = coords[1].replace("¬∞", " ").replace("'", " ").replace("\"", "").replace("E", "").replace("W",
                                                                                                                 "-").strip()
            await state.update_data(new_value_location=(float(latitude), float(longitude)))
            await message.answer(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ ({latitude}, {longitude})? (–î–∞/–ù–µ—Ç)")
            await state.set_state(NewProperty.confirm_edit)
        else:
            raise ValueError("Invalid format")
    except Exception as e:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(NewProperty.confirm_edit)
async def confirm_property_edit(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    if confirmation == "–¥–∞":
        data = await state.get_data()
        property_id = data['property_id']
        selected_field = data.get('selected_field')

        await db.ensure_connection()

        if selected_field == "latitude_longitude":
            latitude, longitude = data.get('new_value_location')
            query = f"UPDATE properties SET latitude = %s, longitude = %s WHERE property_id = %s"
            params = (latitude, longitude, property_id)
        else:
            new_value = data.get('new_value')
            query = f"UPDATE properties SET {selected_field} = %s WHERE property_id = %s"
            params = (new_value, property_id)

        try:
            async with db.pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute(query, params)
                    await conn.commit()
            if selected_field == "latitude_longitude":
                await message.answer(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å ID {property_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                                     reply_markup=admins_panel)
            else:
                await message.answer(
                    f"–ü–æ–ª–µ {selected_field} –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å ID {property_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                    reply_markup=admins_panel)
        except Exception as e:
            logging.error(f"Error executing query: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
    else:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admins_panel)

    await state.clear()


# –í–≤–æ–¥ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@router.callback_query(NewProperty.waiting_for_edit_field)
async def edit_property_field_received(callback_query: types.CallbackQuery, state: FSMContext):
    selected_field = callback_query.data.replace("edit_", "")
    await state.update_data(selected_field=selected_field)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {selected_field}(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è)::")
    await state.set_state(NewProperty.waiting_for_edit_value)
    await callback_query.answer()


@router.message(NewProperty.waiting_for_edit_value, F.photo)
async def edit_property_value_received_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    property_id = data['property_id']
    selected_field = data['selected_field']

    await state.update_data(new_value=photo_id)
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ '{selected_field}' –Ω–∞ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ? (–î–∞/–ù–µ—Ç)")
    await state.set_state(NewProperty.confirm_edit)

@router.message(NewProperty.waiting_for_edit_value, F.text)
async def edit_property_value_received_text(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    data = await state.get_data()
    property_id = data['property_id']
    selected_field = data['selected_field']
    new_value = message.text

    await state.update_data(new_value=new_value)
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ '{selected_field}' –Ω–∞ '{new_value}'? (–î–∞/–ù–µ—Ç)")
    await state.set_state(NewProperty.confirm_edit)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(NewProperty.confirm_edit)
async def confirm_property_edit(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    if confirmation == "–¥–∞":
        data = await state.get_data()
        property_id = data['property_id']
        selected_field = data['selected_field']
        new_value = data['new_value']

        await db.ensure_connection()

        query = f"UPDATE properties SET {selected_field} = %s WHERE property_id = %s"
        params = (new_value, property_id)

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query, params)
                await conn.commit()

        await message.answer(f"–ü–æ–ª–µ {selected_field} –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å ID {property_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admins_panel)
    else:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admins_panel)

    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
@router.message(F.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
async def view_all_properties(message: Message):
    if message.from_user.id in ADMINS:
        await db.ensure_connection()

        query = "SELECT property_id, name FROM properties"

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query)
                properties = await cursor.fetchall()

        if properties:
            response = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:\n\n"
            for prop in properties:
                response += f"ID: {prop[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {prop[1]}\n"
            await message.answer(response,reply_markup=admins_panel)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def return_to_main_menu(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=kb.main)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫


class Newsletter(StatesGroup):
    waiting_for_subject = State()
    waiting_for_message = State()
    waiting_for_photo = State()
    confirm_sending = State()



async def log_user_action(property_id: int, user_id: int, action: str):
    await db.ensure_connection()

    query = """
    INSERT INTO analytics (property_id, user_id, action)
    VALUES (%s, %s, %s)
    """
    params = (property_id, user_id, action)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()


# –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def create_newsletter(subject: str, message: str, photo: str = None):
    await db.ensure_connection()

    query = """
    INSERT INTO newsletters (subject, message, photo)
    VALUES (%s, %s, %s)
    """
    params = (subject, message, photo)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def log_newsletter_recipient(newsletter_id: int, user_id: int):
    await db.ensure_connection()

    query = """
    INSERT INTO newsletter_recipients (newsletter_id, user_id)
    VALUES (%s, %s)
    """
    params = (newsletter_id, user_id)

    async with db.pool.acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, params)
            await conn.commit()


# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.text == "‚úâÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_newsletter_creation(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(Newsletter.waiting_for_subject)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')


# –í–≤–æ–¥ —Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Newsletter.waiting_for_subject)
async def newsletter_subject_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(subject=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Newsletter.waiting_for_message)


# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Newsletter.waiting_for_message)
async def newsletter_message_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(message=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip:")
    await state.set_state(Newsletter.waiting_for_photo)


# –í–≤–æ–¥ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Newsletter.waiting_for_photo, F.photo)
async def newsletter_photo_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (–î–∞/–ù–µ—Ç)")
    await state.set_state(Newsletter.confirm_sending)


@router.message(Newsletter.waiting_for_photo, F.text)
async def newsletter_text_received(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    await state.update_data(photo=None)
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (–î–∞/–ù–µ—Ç)")
    await state.set_state(Newsletter.confirm_sending)


@router.message(Newsletter.confirm_sending)
async def confirm_newsletter_sending(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    if confirmation == "–¥–∞":
        data = await state.get_data()
        subject = data['subject']
        message_text = data['message']
        photo = data.get('photo')

        await create_newsletter(subject, message_text, photo)

        await db.ensure_connection()

        query = "SELECT user_id FROM users WHERE notifications_enabled = TRUE"

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query)
                users = await cursor.fetchall()

        for user in users:
            user_id = user[0]
            try:
                if photo:
                    await bot.send_photo(user_id, photo=photo, caption=f"{subject}\n\n{message_text}")
                else:
                    await bot.send_message(user_id, text=f"{subject}\n\n{message_text}")
            except Exception as e:
                logging.exception(f"Failed to send notification to user {user_id}: {e}")

        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", reply_markup=admins_panel)
    else:
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admins_panel)

    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_newsletter_to_user(user_id: int, subject: str, message_text: str, photo: str = None):
    try:
        if photo:
            await bot.send_photo(user_id, photo=photo, caption=f"{subject}\n\n{message_text}")
        else:
            await bot.send_message(user_id, text=f"{subject}\n\n{message_text}")
    except Exception as e:
        logging.exception(f"Failed to send notification to user {user_id}: {e}")






# @router.callback_query(F.data == "subscribe_notifications")
# async def subscribe_notifications(callback_query: CallbackQuery):
#     await db.ensure_connection()
#     await db.update_last_activity(callback_query.from_user.id)
#     user_id = callback_query.from_user.id
#
#     await db.subscribe_to_notifications(user_id)
#     await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!", reply_markup=kb.main)
#     await callback_query.answer()
#
#
# @router.callback_query(F.data == "unsubscribe_notifications")
# async def unsubscribe_notifications(callback_query: CallbackQuery):
#     await db.ensure_connection()
#     await db.update_last_activity(callback_query.from_user.id)
#     user_id = callback_query.from_user.id
#
#     await db.unsubscribe_from_notifications(user_id)
#     await callback_query.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=kb.main)
#     await callback_query.answer()


@router.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics(message: Message):
    if message.from_user.id in ADMINS:
        await db.ensure_connection()

        stats = await db.get_detailed_user_statistics()
        response_text = (
            f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
            f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é):</b> {stats['active_users']}\n"
            f"üÜï <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é):</b> {stats['new_users']}\n"
        )

        await message.answer(response_text, parse_mode="HTML",reply_markup=admins_panel)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admins_panel)
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=admins_panel)



# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
export_buttons = ReplyKeyboardMarkup(
    resize_keyboard=True,
    one_time_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫")],
        [KeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ]
)

# –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_data_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=export_buttons)

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
@router.message(F.text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫")
async def export_properties(message: Message):
    try:
        await db.ensure_connection()
        query = "SELECT * FROM properties"

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query)
                data = await cursor.fetchall()

        if data:
            df = pd.DataFrame(data, columns=[desc[0] for desc in cursor.description])
            file_path = 'properties_export.xlsx'
            df.to_excel(file_path, index=False)
            file = FSInputFile(file_path)
            await message.answer_document(
                file,
                caption=f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞ <b>{datetime.now().strftime("%d-%m-%Y")}</b>',
                parse_mode='HTML'
            )
        else:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
@router.message(F.text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def export_users(message: Message):
    try:
        await db.ensure_connection()
        query = "SELECT * FROM users"

        async with db.pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(query)
                data = await cursor.fetchall()

        if data:
            df = pd.DataFrame(data, columns=[desc[0] for desc in cursor.description])
            file_path = 'users_export.xlsx'
            df.to_excel(file_path, index=False)
            file = FSInputFile(file_path)
            await message.answer_document(
                file,
                caption=f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞ <b>{datetime.now().strftime("%d-%m-%Y")}</b>',
                parse_mode='HTML'
            )
        else:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")